name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Which environment to deploy AWS resources for?
        options:
          - demo
          - prod
  # push:
  #   branches:
  #     - demo
  #     - prod
# permissions:
#   id-token: write
#   contents: read

jobs:
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    name: Test and Lint
    secrets: 
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: [test-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set vars
        run:  |
          if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
            echo "prod" > .workspace
          else
          echo "demo" > .workspace
          fi
      - name: Push to ECR
        env: 
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker build --compress -t ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA .
          docker push ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA
          docker build --compress -t ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA proxy/
          docker push ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA
      # - name: Configure AWS credentials (OIDC)
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: us-east-1

      - name: Terraform apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_DB_PASSWORD: ${{ secrets.TF_VAR_DB_PASSWORD }}
          
          TF_VAR_cd_github_access_token:  ${{ secrets.TF_VAR_CD_GITHUB_ACCESS_TOKEN }}
          TF_VAR_DJANGO_SECRET_KEY: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
        run: |
          export TF_VAR_ecr_app_image="${{ vars.ECR_REPO_APP }}:$GITHUB_SHA"
          export TF_VAR_ecr_proxy_image="${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA"
          export TF_VAR_ecr_tools_image="${{ vars.ECR_REPO_TOOLS }}:latest"
          workspace=$(cat .workspace)
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init
          docker compose run --rm terraform -chdir=deploy/ workspace select -or-create $workspace
          docker compose run --rm terraform -chdir=deploy/ apply -auto-approve
      # - name: Put/Rotate Authorizer Shared Secret (post-apply, no TF state exposure)
      #   env:
      #     AUTH_SECRET: ${{ secrets.AUTH_SECRET }}  # set this in your repo or environment secrets
      #   run: |
      #     set -euo pipefail
      #     if [ -z "${AUTH_SECRET:-}" ]; then
      #       echo "::warning::AUTH_SECRET is not set; skipping secret write. Authorizer will fail unless AUTH_SECRET or AUTH_SECRET_ARN has a value."
      #       exit 0
      #     fi
      #     AUTH_SECRET_ARN=$(terraform -chdir=${{ env.TF_WORKING_DIR }} output -raw auth_secret_arn)
      #     aws secretsmanager put-secret-value \
      #       --secret-id "$AUTH_SECRET_ARN" \
      #       --secret-string "$AUTH_SECRET"
      #     echo "Secret value written to $AUTH_SECRET_ARN"





